  local NotificationUI = Instance.new("ScreenGui")
local Container = Instance.new("Frame")
local Tray = Instance.new("Frame")
local Content = Instance.new("Frame")
local UIListLayout = Instance.new("UIListLayout")
local ScrollingFrame = Instance.new("ScrollingFrame")
local UIListLayout_2 = Instance.new("UIListLayout")
local Notification = Instance.new("Frame")
local Box = Instance.new("ImageLabel")
local Border = Instance.new("Frame")
local UICorner = Instance.new("UICorner")
local UIGradientB = Instance.new("UIGradient")
local Boxdy = Instance.new("Frame")
local TitleBack = Instance.new("Frame")
local UICorner_2 = Instance.new("UICorner")
local Body = Instance.new("TextLabel")
local Title = Instance.new("TextLabel")
local UICorner_3 = Instance.new("UICorner")
local UIScale = Instance.new("UIScale")
local Controls = Instance.new("Frame")
local Clear = Instance.new("Frame")
local UICorner_4 = Instance.new("UICorner")
local TextLabel = Instance.new("TextLabel")
local UIScale_2 = Instance.new("UIScale")
local Button = Instance.new("ImageButton")
local Frame = Instance.new("Frame")
local UICorner_5 = Instance.new("UICorner")



NotificationUI.Name = "NotificationUI"
NotificationUI.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

Container.Name = "Container"
Container.Parent = NotificationUI
Container.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Container.BackgroundTransparency = 1.000
Container.Size = UDim2.new(1, 0, 1, 0)

Tray.Name = "Tray"
Tray.Parent = Container
Tray.AnchorPoint = Vector2.new(1, 0.5)
Tray.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
Tray.BackgroundTransparency = 1.000
Tray.BorderColor3 = Color3.fromRGB(27, 42, 53)
Tray.BorderSizePixel = 0
Tray.Position = UDim2.new(0.990000069, 0, 0.529999971, 0)
Tray.Size = UDim2.new(0, 364, 0.899999976, 0)

Content.Name = "Content"
Content.Parent = Tray
Content.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Content.BackgroundTransparency = 1.000
Content.BorderColor3 = Color3.fromRGB(27, 42, 53)
Content.Size = UDim2.new(1, 0, 0.941760898, 0)

UIListLayout.Parent = Content
UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout.VerticalAlignment = Enum.VerticalAlignment.Bottom

ScrollingFrame.Parent = Content
ScrollingFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ScrollingFrame.BackgroundTransparency = 1.000
ScrollingFrame.BorderColor3 = Color3.fromRGB(27, 42, 53)
ScrollingFrame.Size = UDim2.new(1, 0, 0.600000024, 0)
ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
ScrollingFrame.ScrollBarThickness = 0

UIListLayout_2.Parent = ScrollingFrame
UIListLayout_2.HorizontalAlignment = Enum.HorizontalAlignment.Right
UIListLayout_2.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout_2.VerticalAlignment = Enum.VerticalAlignment.Bottom
UIListLayout_2.Padding = UDim.new(0, 25)

Notification.Name = "Notification"
Notification.Parent = UIListLayout_2
Notification.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Notification.BackgroundTransparency = 1.000
Notification.Size = UDim2.new(0, 302, 0, 100)

Box.Name = "Box"
Box.Parent = Notification
Box.AnchorPoint = Vector2.new(0, 0.5)
Box.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Box.BackgroundTransparency = 1.000
Box.Position = UDim2.new(0, 0, 0.5, -5)
Box.Size = UDim2.new(1, 0, 1, 0)
Box.ZIndex = 4
Box.Image = "http://www.roblox.com/asset/?id=7340758439"
Box.ImageColor3 = Color3.fromRGB(182, 182, 182)

Border.Name = "Border"
Border.Parent = Box
Border.AnchorPoint = Vector2.new(0.5, 0.5)
Border.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Border.Position = UDim2.new(0.5, 0, 0.5, 0)
Border.Size = UDim2.new(1, 4, 1, 4)
Border.ZIndex = 3

UICorner.CornerRadius = UDim.new(0, 5)
UICorner.Parent = Border

UIGradientB.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(83, 83, 83)), ColorSequenceKeypoint.new(0.28, Color3.fromRGB(159, 159, 159)), ColorSequenceKeypoint.new(0.66, Color3.fromRGB(159, 159, 159)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(83, 83, 83))}
UIGradientB.Rotation = 90
UIGradientB.Name = "UIGradientB"
UIGradientB.Parent = Border

Boxdy.Name = "Boxdy"
Boxdy.Parent = Box
Boxdy.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Boxdy.BackgroundTransparency = 1.000
Boxdy.Position = UDim2.new(0.278579235, 0, 0, 0)
Boxdy.Size = UDim2.new(0.721420705, 0, 1, 0)
Boxdy.ZIndex = 8

TitleBack.Name = "TitleBack"
TitleBack.Parent = Box
TitleBack.BackgroundColor3 = Color3.fromRGB(94, 94, 94)
TitleBack.BackgroundTransparency = 0.600
TitleBack.Size = UDim2.new(0.999999583, 0, 0, 35)
TitleBack.ZIndex = 4

UICorner_2.CornerRadius = UDim.new(0, 2)
UICorner_2.Parent = TitleBack

Body.Name = "Body"
Body.Parent = Box
Body.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Body.BackgroundTransparency = 1.000
Body.Position = UDim2.new(0.0262172278, 0, 0.322580576, 0)
Body.Size = UDim2.new(0.946619213, 0, -0.0725805685, 75)
Body.ZIndex = 5
Body.Font = Enum.Font.Code
Body.Text = "OnlyTwentyCharacters declined to trade with you"
Body.TextColor3 = Color3.fromRGB(255, 255, 255)
Body.TextSize = 15.000
Body.TextWrapped = true

Title.Name = "Title"
Title.Parent = Box
Title.BackgroundColor3 = Color3.fromRGB(94, 94, 94)
Title.BackgroundTransparency = 1.000
Title.BorderColor3 = Color3.fromRGB(27, 42, 53)
Title.Size = UDim2.new(0.999999583, 0, 0, 35)
Title.ZIndex = 5
Title.Font = Enum.Font.SourceSansBold
Title.Text = "REQUEST DECLINED"
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.TextSize = 26.000

UICorner_3.CornerRadius = UDim.new(0, 2)
UICorner_3.Parent = Title

UIScale.Parent = Content

Controls.Name = "Controls"
Controls.Parent = Tray
Controls.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Controls.BackgroundTransparency = 1.000
Controls.Position = UDim2.new(0, 0, 0.941760957, 0)
Controls.Size = UDim2.new(1, 0, 0.0599999987, 0)

Clear.Name = "Clear"
Clear.Parent = Controls
Clear.AnchorPoint = Vector2.new(0, 0.5)
Clear.BackgroundColor3 = Color3.fromRGB(162, 55, 45)
Clear.BorderSizePixel = 0
Clear.Position = UDim2.new(0.899999976, 0, 0.5, 0)
Clear.Size = UDim2.new(0, 31, 0, 31)

UICorner_4.CornerRadius = UDim.new(1, 6)
UICorner_4.Parent = Clear

TextLabel.Parent = Clear
TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.BackgroundTransparency = 1.000
TextLabel.Size = UDim2.new(1, 0, 1, 0)
TextLabel.Font = Enum.Font.FredokaOne
TextLabel.Text = "X"
TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.TextSize = 20.000
TextLabel.TextTransparency = 1.000

UIScale_2.Parent = Clear

Button.Name = "Button"
Button.Parent = Clear
Button.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Button.BackgroundTransparency = 1.000
Button.Size = UDim2.new(1, 0, 1, 0)
Button.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png"
Button.ImageTransparency = 1.000

Frame.Parent = Controls
Frame.BackgroundColor3 = Color3.fromRGB(56, 56, 56)
Frame.BackgroundTransparency = 0.500
Frame.Position = UDim2.new(0.719780266, 0, -0.0761295781, 0)
Frame.Size = UDim2.new(0, 108, 0, 59)
Frame.Visible = false
Frame.ZIndex = 0

UICorner_5.Parent = Frame

-- Scripts:

local function MFJZOI_fake_script() -- Clear.LocalScript 
	local script = Instance.new('LocalScript', Clear)

	local Element = script.Parent;
	local TS = game.TweenService;
	local Button = Element.Button;
	
	
	
	local Hovering = false;
	
	
	function Hover ()
		local Time1 = 0.3;
		local Time2 = Time1/2;
	
		local Info1 = TweenInfo.new(
			Time1,
			Enum.EasingStyle.Back,
			Enum.EasingDirection.Out
		);
		
		local Info2 = TweenInfo.new(
			Time2,
			Enum.EasingStyle.Sine,
			Enum.EasingDirection.Out
		);
		
		TS:Create(Element.UICorner, Info1, { CornerRadius = UDim.new(0,6) }):Play();
		--wait(0.1)
		TS:Create(Element.TextLabel, Info2, { TextTransparency = 0 }):Play();
		
	end
	
	function UnHover ()
		local Time1 = 0.3;
		local Time2 = Time1/2;
	
		local Info1 = TweenInfo.new(
			Time1,
			Enum.EasingStyle.Back,
			Enum.EasingDirection.Out
		);
	
		local Info2 = TweenInfo.new(
			Time2,
			Enum.EasingStyle.Sine,
			Enum.EasingDirection.Out
		);
		
		TS:Create(Element.TextLabel, Info2, { TextTransparency = 1 }):Play()
		
		--wait(0.1)
		TS:Create(Element.UICorner, Info1, { CornerRadius = UDim.new(1,0) }):Play();
	
	end
	
	Button.InputBegan:Connect(function (Input)
		if (Input.UserInputType == Enum.UserInputType.MouseButton1) then 
			game.ReplicatedStorage.NotificationCards.Event:Fire("Clear")
			return; 
		end
		Hovering = true;
		Hover ();
	end)
	
	Button.InputEnded:Connect(function (Input)
		if (Input.UserInputType == Enum.UserInputType.MouseButton1) then return; end
		Hovering = false;
		UnHover();
	end)
	
	
	
	
end
coroutine.wrap(MFJZOI_fake_script)()
local function VNMJIDG_fake_script() -- NotificationUI.Run 
	local script = Instance.new('LocalScript', NotificationUI)

	-- Notification feed UI, by plasma_node
	-- v 0.1
	
	-- There are two main types of card notifications:
	-- DECAYING CARDS: Automatically disappear after a set time
	-- PERSISTENT CARDS: Do not clear unless manually cleared
	
	---=== REQUIREMENTS ===---
	
	
	local UI = script.Parent;
	local Tray = UI.Container.Tray.Content;
	local Scroll = Tray.ScrollingFrame;
	local Main = game.ReplicatedStorage:FindFirstChild("NotificationCards");
	print("<NotificationCards, by Plasma_Node, Version `"..Main.VERSION.Value.."`>")
	
	local Cards = Main.Cards;
	
	local Event = Main.Event;
	local RemoteEvent = Main.RemoteEvent;
	
	---=== ------------- ===---
	local Player = game.Players.LocalPlayer;
	
	local R = Random.new(os.clock() * os.time());
	local TS = game.TweenService;
	
	local RS = game:GetService("RunService").RenderStepped;
	
	local Hovering = false;
	local Enabled = true; -- False = do not respond to any requests
	local Hidden = false; -- Is UI hidden
	
	local Count = 0;
	local PermanentCount = 0;
	
	--[[
	local Config = {
		
		Muted = false; -- Set to true to mute all sounds
		AnimateIn = true; 
		AnimationDirection = "Left"; -- Right or Left. Left for right side of screen, vice versa
		
		Height = UDim.new(0.65, 0);
		
		InTime = 0.5; -- Defaults
		Lifetime = 5; -- Defaults
		OutTime = 2; -- Defaults
		
		Padding = 25; -- Pixels
	};
	--]]
	
	local Config = require(Main.DefaultConfig);
	
	
	
	Config.FadeInfo = TweenInfo.new(
		Config.OutTime,
		Enum.EasingStyle.Sine,
		Enum.EasingDirection.Out
	);
	
	
	
	---=== ------------- ===---
	
	function FindCard (Name)
		local attempt = Cards:FindFirstChild(Name);
		if (attempt) then
			return attempt;
		end
		error ("[NotificationUI] Could not find a card named `"..Name.."`!", 0);
		return false;
	end
	
	function UpdatePersistentCount ()
		local i = 0;
		for _, card in pairs (Scroll:GetChildren()) do
			if (card:IsA("UIListLayout") and not card:GetAttribute("Persistent")) then
				continue;
			end
			i += 1;
		end
		Count = i;
	end
	
	function UpdateCount ()
		local i = 0;
		for _, card in pairs (Scroll:GetChildren()) do
			if (card:IsA("UIListLayout")) then
				continue;
			end
			i += 1;
		end
		Count = i;
	end
	
	
	
	function Clear (ExcludePersistentCards) -- Clears all active notifications
		if (not ExcludePersistentCards) then
			for i, card in pairs (Scroll:GetChildren()) do
				if (card:IsA("UIListLayout")) then
					continue;
				end
				task.spawn(function () FadeOut(card, 0.5, true); end);
				if (Count < 10) then
					wait(0.06);
				elseif (Count < 60) then
					RS:Wait();
				end
				--card:Destroy();
			end
		else
			for i, card in pairs (Scroll:GetChildren()) do
				if (card:IsA("UIListLayout") or card:GetAttribute("Persistent")) then
					continue;
				end
				if (Count < 10) then
					wait(0.06);
				elseif (Count < 60) then
					RS:Wait();
				end
				task.spawn(function () FadeOut(card, 0.5, true); end);
				--card:Destroy();
			end
		end
		UpdateCount();
	end
	
	function UpdateConfig () -- Runs when the config has updated to change things as needed
		
		--Scroll.Size = UDim2.new(1, 0, Config.Height.Scale, Config.Height.Offset);
		TS:Create(Scroll, TweenInfo.new(
				1,
				Enum.EasingStyle.Sine,
				Enum.EasingDirection.Out
			),
			{ Size = UDim2.new(1, 0, Config.Height.Scale, Config.Height.Offset); }
		):Play();
		
		
		Config.FadeInfo = TweenInfo.new(
			Config.OutTime,
			Config.FadeInfo.EasingStyle,
			Config.FadeInfo.EasingDirection
		);
		
		Scroll.UIListLayout.Padding = UDim.new(0, Config.Padding);
		
	end
	
	---=== ------------- ===---
	
	function PlaySound (Sound, V)
		if (Config.Muted) then
			return false;
		end
		task.spawn(function ()
			local s = Sound:Clone();
			
			s.Parent = workspace:FindFirstChild("PlayingSounds") or workspace;
	
			local v = V or 0; --or 0.15;
	
			s.PlaybackSpeed += R:NextNumber(-v, v);
			s:Play();
			wait(s.TimeLength);
			s:Destroy();
		end);
	end
	
	function PlaySoundId (Id, V, DontClone)
		if (Config.Muted) then
			return false;
		end
		task.spawn(function ()
			local s = Instance.new("Sound");
			s.SoundId = Id;
			s.Parent = workspace:FindFirstChild("PlayingSounds") or workspace;
	
			local v = V or 0; --or 0.15;
	
			s.PlaybackSpeed += R:NextNumber(-v, v);
			s:Play();
			wait(s.TimeLength);
			s:Destroy();
		end);
	end
	
	
	function FadeOut (Card, Time, Destroy)
		local info;
		if (Time) then
			info = TweenInfo.new(
				Time,
				Config.FadeInfo.EasingStyle,
				Config.FadeInfo.EasingDirection
			);
		else
			info = Config.FadeInfo;
		end
		
		for i, o in pairs(Card:GetDescendants()) do
			if (o.ClassName == "Frame" or o.ClassName == "ScrollingFrame") then
				TS:Create(o, info, {BackgroundTransparency = 1}):Play();
			elseif (o.ClassName == "ImageLabel" or o.ClassName == "ImageButton") then
				TS:Create(o, info, {BackgroundTransparency = 1}):Play();
				TS:Create(o, info, {ImageTransparency = 1}):Play();
			elseif (o.ClassName == "TextLabel" or o.ClassName == "TextButton" or o.ClassName == "TextBox") then
				TS:Create(o, info, {BackgroundTransparency = 1}):Play();
				TS:Create(o, info, {TextTransparency = 1}):Play();
				TS:Create(o, info, {TextStrokeTransparency = 1}):Play();
			end
		end
		
		if (Destroy) then
			task.wait(Time);
			Card:Destroy();
		end
	end
	
	---=== ------------- ===---
	
	function Add (Info)
		task.spawn(function () 
			local card = Info.Card;
			card.Visible = true;
			card.Parent = Scroll;
			
			
			
			if (Info.Id) then
				card:SetAttribute("Id", Info.Id);
			else
				card:SetAttribute("Id", 0);
			end
			
			if (Info.Sound) then
				local vary = 0;
				local sound = Info.Sound;
				
				if (Info.SoundVary) then
					if (Info.SoundVary == true) then
						vary = 0.15;
					else
						vary = Info.SoundVary;
					end
				end
				
				if (typeof(sound) == "string") then
					if (string.find(sound, "rbxassetid://")) then
						PlaySoundId(sound, vary);
					else
						sound = Main.Sounds:FindFirstChild(sound);
						if (sound) then
							PlaySound(sound, vary)
						end
					end
				elseif (typeof(sound) == "Instance") then
					PlaySound (sound, vary);	
				end
			end
			
			if (Info.Script) then
				card.Script.Disabled = false;
			end
			
			if (not Info.DontAnimate and Config.AnimateIn) then
				
				if (Config.AnimationDirection == "Left") then -- Left to right
					card.Box.Position = UDim2.new(2, 0, 0, 0);
				elseif (Config.AnimationDirection == "Right") then -- Right to left
	 				card.Box.Position = UDim2.new(-2, 0, 0, 0);
				end
				
				TS:Create(card.Box, TweenInfo.new(
					Config.InTime,
					Enum.EasingStyle.Quint,
					Enum.EasingDirection.Out
					), { Position = UDim2.new(0,0,0,0)}):Play();
				
				wait(Config.InTime);
	
				
			end
			
			if (not Info.Persistent) then
				task.wait(Info.Lifetime)
				FadeOut (card, Config.OutTime);
				task.wait(Config.OutTime);
				card:Destroy();
				UpdateCount ();
			end
			
		end);
		UpdateCount();
	end
	
	function NewCard (Data)
		local card;
		
		if (typeof(Data) == "string") then
			card = FindCard(Data or "Notification");
		else
			card = FindCard(Data.Type or Data.Name or "Notification");
		end
		
		if (card) then
			card = card:Clone();
			
			local box = card.Box;
			
			if (Data.Title) then
				box.Title.Text = Data.Title;
			end
			
			if (Data.Body) then
				box.Body.Text = Data.Body;
			end
			
			if (Data.Weight) then
				card.LayoutOrder = Data.Weight;
			end
			
			if (box:FindFirstChild("Button")) then
				if (Data.OnClick) then
					box.Button.MouseButton1Click:Connect(Data.OnClick);
				end
				if (Data.OnHover) then
					box.Button.MouseButton1Click:Connect(Data.OnHover);
				end
				if (Data.OnLeave) then
					box.Button.MouseButton1Click:Connect(Data.OnLeave);
				end
			end
			
			
			if (Data.Color) then
				box.TitleBar.BackgroundColor3 = Data.Color;
				if (box.TitleBar:FindFirstChild("Anticorner")) then
					box.TitleBar.Anticorner.BackgroundColor3 = Data.Color;
				end
				
				if (box.IconFrame:FindFirstChild("TextLabel")) then
					box.IconFrame.TextLabel.TextColor3 = Data.Color;
				end
			end
			
			if (Data.IconText) then
				if (box.IconFrame:FindFirstChild("TextLabel")) then
					box.IconFrame.TextLabel.Text = Data.IconText;
				end
			end
			
			if (Data.BackgroundColor) then
				box.Background.BackgroundColor3 = Data.BackgroundColor;
			end
			
			if (Data.Icon) then
				box.IconFrame.ImageLabel.Visible = true;
				box.IconFrame.ImageLabel.Image = Data.Icon;
				if (box.IconFrame:FindFirstChild("TextLabel")) then
					box.IconFrame.TextLabel.Visible = false;
				end
			end
			
			if (Data.Persist) then
				card:SetAttribute("Persist", true);
				Data.Lifetime = 0;
			end
			
			if (Data.Clearable) then
				if (box:FindFirstChild("ClearButton")) then
					box.ClearButton.MouseButton1Click:Connect(function ()
						FadeOut(card, 0.5, true);
						UpdateCount();
					end);
				end
			end
			
			Add({
				Lifetime = Data.Lifetime or Config.Lifetime;
				Persistent = Data.Persistent or false;
				Sound = Data.Sound or false;
				SoundVary = Data.SoundVary or false;
				Card = card;
				Script = Data.Script or false;
				Id = Data.Id or false;
			});
		end
	end
	
	---=== ------------- ===---
	
	-- Adjust the scrollbox when new content gets added
	
	Scroll.MouseEnter:Connect(function ()
		Hovering = true;
	end)
	
	Scroll.MouseLeave:Connect(function ()
		Hovering = false;
	end)
	
	Scroll.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
		if (Hovering == true) then
			local absoluteContentSize = Scroll.UIListLayout.AbsoluteContentSize
			Scroll.CanvasPosition = Vector2.new(0, absoluteContentSize.Y);
		end
	end)
	
	game["Run Service"]:BindToRenderStep("Adjust", Enum.RenderPriority.Last.Value, function ()
		if (Hovering == false) then 
			local absoluteContentSize = Scroll.UIListLayout.AbsoluteContentSize
			Scroll.CanvasPosition = Vector2.new(0, absoluteContentSize.Y);
		end
	end)
	--[[
	task.spawn(function ()
		while true do
			RS:Wait(); 
			if (Hovering == false) then 
				local absoluteContentSize = Scroll.UIListLayout.AbsoluteContentSize
				Scroll.CanvasPosition = Vector2.new(0, absoluteContentSize.Y);
			end
	
		end
	end)
	--]]
	
	---=== ------------- ===---
	
	function HandleEvent (Request, Data)
		if (Request == "Notify") then
			if (Enabled) then
				NewCard(Data);
			end
		elseif (Request == "Alert") then
			if (Enabled) then
				
			end
		elseif (Request == "Disable") then
			
		elseif (Request == "Enable") then
			
		elseif (Request == "Hide") then
			Hidden = true;
			Tray.Visible = false;
		elseif (Request == "Show") then
			Hidden = false;
			Tray.Visible = true;
		elseif (Request == "Configure") then
			for i, n in pairs(Data) do
				Config[i] = n;
			end
			
			UpdateConfig();
		elseif (Request == "GetConfig") then
			return Config;
		elseif (Request == "Clear") then
			if (not Data or Data == "All") then
				Clear();
			elseif (Data == "Decaying" or Data == "ExcludePersistent") then
				-- Clear only cards that have a timeout, and not ones that stay until dismissed
				Clear(true)
			end
		end
	end
	
	Event.Event:Connect(HandleEvent);
	RemoteEvent.OnClientEvent:Connect(HandleEvent);
	
	if (not workspace:FindFirstChild("PlayingSounds")) then
		local f = Instance.new("Folder");
		f.Name = "PlayingSounds";
		f.Parent = workspace;
	end
	
	UpdateConfig();
end
coroutine.wrap(VNMJIDG_fake_script)()
-- NotificationUI.TEST EXAMPLES is disabled.
